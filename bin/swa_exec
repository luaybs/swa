#!/usr/bin/env ruby

require 'dotenv/load'
require 'tty'
require 'aws-sdk'

COMMANDS = {deploy: "Deploy App",
            start:  "Start Instance",
            stop:   "Stop Instance",
            ip:     "Get IP of Instance",
            quit:   "Quit"}.freeze

REGIONS = { "US East (Ohio)" => "us-east-2",
            "US East (N. Virginia)" => "us-east-1",
            "US West (N. California)" => "us-west-1",
            "US West (Oregon)" => "us-west-2",
            "Asia Pacific (Tokyo)" => "ap-northeast-1",
            "Asia Pacific (Seoul)" => "ap-northeast-2",
            "Asia Pacific (Mumbai)" => "ap-south-1",
            "Asia Pacific (Singapore)" => "ap-southeast-1",
            "Asia Pacific (Sydney)" => "ap-southeast-2",
            "EU (Frankfurt)" => "eu-central-1",
            "EU (Ireland)" => "eu-west-1",
            "EU (London)" => "eu-west-2",
            "South America (SÃ£o Paulo)" => "sa-east-1" }.freeze

def aws_wrapper(&block)
  begin
    block.call
  rescue StandardError => e
    puts "ERROR: #{e.message}"
  end
end

# BEGIN CLI
loop do
  prompt = TTY::Prompt.new
  selected = prompt.select("What would you like to do?", COMMANDS.values)

  if selected == COMMANDS[:quit]
    puts "Bye!"
    break
  end

  selected_region = prompt.select("Which region are you working with?", REGIONS)

  Aws.config.update({
    region: selected_region,
    credentials: Aws::Credentials.new(ENV['AWS_ACCESS_KEY'],
                                      ENV['AWS_SECRET_KEY'])
  })
  opsworks = Aws::OpsWorks::Client.new()

  puts "Grabbing stacks..."
  stacks = opsworks.describe_stacks.stacks
  stack_user = prompt.select("Which stack?", stacks.map(&:name))
  selected_stack = stacks.select{ |s| s.name == stack_user }.first

  aws_wrapper do
    case selected
    when COMMANDS[:deploy]
      puts "Grabbing apps..."
      apps = opsworks.describe_apps({stack_id: selected_stack.stack_id}).apps
      app_user = prompt.select("Which app?", apps.map(&:name))
      selected_app = apps.select{ |a| a.name == app_user }.first

      res = opsworks.create_deployment({
        stack_id: selected_stack.stack_id,
        app_id:   selected_app.app_id,
        command:  {
                    name: "deploy",
                    args: {
                      "migrate" => ["true"],
                    }
                  },
        comment:  "Deploying from swa CLI"
      })
      puts "Deployed #{selected_app.name}! ID: #{res.deployment_id}"
    when COMMANDS[:start]
      puts "Grabbing offline instances..."
      instances = opsworks.describe_instances({stack_id: selected_stack.stack_id}).instances.select{|i| i.status != "online"}
      instance_user = prompt.select("Which instance?", instances.map(&:hostname))
      selected_instance = instances.select{ |i| i.hostname == instance_user }.first

      res = opsworks.start_instance({instance_id: selected_instance.instance_id})
      puts "Done!"
    when COMMANDS[:stop]
      puts "Grabbing online instances..."
      instances = opsworks.describe_instances({stack_id: selected_stack.stack_id}).instances.select{|i| i.status == "online"}
      instance_user = prompt.select("Which instance?", instances.map(&:hostname))
      selected_instance = instances.select{ |i| i.hostname == instance_user }.first

      res = opsworks.stop_instance({instance_id: selected_instance.instance_id})
      puts "Done!"
    when COMMANDS[:ip]
      puts "Grabbing instances..."
      instances = opsworks.describe_instances({stack_id: selected_stack.stack_id}).instances
      instance_user = prompt.select("Which instance?", instances.reduce({}) {|m, i| m.merge!({"#{i.hostname} -- #{i.status}" => i.instance_id}); m })
      selected_instance = instances.select{ |i| i.instance_id == instance_user }.first

      pastel = Pastel.new
      puts "\n > The IP of #{selected_instance.hostname} is: " + pastel.on_bright_white.black("#{selected_instance.public_ip || selected_instance.elastic_ip || selected_instance.private_ip}")
      puts "\n"
    end
  end
end
